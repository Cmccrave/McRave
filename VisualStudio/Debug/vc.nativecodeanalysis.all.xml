<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>wall.h</FILENAME>
      <LINE>49</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEB::Wall::chokeAngle' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEB::Wall::{ctor}</FUNCTION>
    <DECORATED>??0Wall@BWEB@@QAE@PBVArea@BWEM@@PBVChokePoint@3@V?$vector@VUnitType@BWAPI@@V?$allocator@VUnitType@BWAPI@@@std@@@std@@2VUnitType@BWAPI@@_N4@Z</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>pathfind.cpp</FILENAME>
      <LINE>26</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEB::`anonymous-namespace'::Node::f' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEB::`anonymous-namespace'::Node::{ctor}</FUNCTION>
    <DECORATED>??0Node@?A0xd6fd88c9@BWEB@@QAE@XZ</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>bweb.cpp</FILENAME>
      <LINE>130</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>Dereferencing NULL pointer 'unit'. </DESCRIPTION>
    <FUNCTION>BWEB::Map::`anonymous-namespace'::initializeNeutrals</FUNCTION>
    <DECORATED>?initializeNeutrals@?A0x0c0bcfd1@Map@BWEB@@YAXXZ</DECORATED>
    <FUNCLINE>124</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
        <FILENAME>bweb.cpp</FILENAME>
        <LINE>127</LINE>
        <COLUMN>56</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
        <FILENAME>bweb.cpp</FILENAME>
        <LINE>128</LINE>
        <COLUMN>43</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'unit' may be NULL (Skip this branch)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
        <FILENAME>bweb.cpp</FILENAME>
        <LINE>130</LINE>
        <COLUMN>46</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>usage</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'unit' is dereferenced, but may still be NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>bweb.cpp</FILENAME>
      <LINE>465</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>BWEB::Map::perpendicularLine</FUNCTION>
    <DECORATED>?perpendicularLine@Map@BWEB@@YA?AU?$pair@V?$Point@H$00@BWAPI@@V12@@std@@U34@N@Z</DECORATED>
    <FUNCLINE>460</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>bweb.cpp</FILENAME>
      <LINE>466</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>BWEB::Map::perpendicularLine</FUNCTION>
    <DECORATED>?perpendicularLine@Map@BWEB@@YA?AU?$pair@V?$Point@H$00@BWAPI@@V12@@std@@U34@N@Z</DECORATED>
    <FUNCLINE>460</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>bweb.cpp</FILENAME>
      <LINE>467</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>BWEB::Map::perpendicularLine</FUNCTION>
    <DECORATED>?perpendicularLine@Map@BWEB@@YA?AU?$pair@V?$Point@H$00@BWAPI@@V12@@std@@U34@N@Z</DECORATED>
    <FUNCLINE>460</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>bweb.cpp</FILENAME>
      <LINE>468</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>BWEB::Map::perpendicularLine</FUNCTION>
    <DECORATED>?perpendicularLine@Map@BWEB@@YA?AU?$pair@V?$Point@H$00@BWAPI@@V12@@std@@U34@N@Z</DECORATED>
    <FUNCLINE>460</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>station.cpp</FILENAME>
      <LINE>550</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>Dereferencing NULL pointer 'base'. </DESCRIPTION>
    <FUNCTION>BWEB::Station::draw</FUNCTION>
    <DECORATED>?draw@Station@BWEB@@QAEXXZ</DECORATED>
    <FUNCLINE>513</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
        <FILENAME>station.cpp</FILENAME>
        <LINE>515</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
        <FILENAME>station.cpp</FILENAME>
        <LINE>516</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
        <FILENAME>station.cpp</FILENAME>
        <LINE>519</LINE>
        <COLUMN>34</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
        <FILENAME>station.cpp</FILENAME>
        <LINE>525</LINE>
        <COLUMN>26</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'base' may be NULL (Skip this branch)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
        <FILENAME>station.cpp</FILENAME>
        <LINE>550</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>usage</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'base' is dereferenced, but may still be NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>bweb.h</FILENAME>
      <LINE>71</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>BWEB::Map::getAngle</FUNCTION>
    <DECORATED>??$getAngle@V?$Point@H$00@BWAPI@@@Map@BWEB@@YANU?$pair@V?$Point@H$00@BWAPI@@V12@@std@@@Z</DECORATED>
    <FUNCLINE>70</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bweb</FILEPATH>
      <FILENAME>bweb.h</FILENAME>
      <LINE>72</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>BWEB::Map::getAngle</FUNCTION>
    <DECORATED>??$getAngle@V?$Point@H$00@BWAPI@@@Map@BWEB@@YANU?$pair@V?$Point@H$00@BWAPI@@V12@@std@@@Z</DECORATED>
    <FUNCLINE>70</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>graph.h</FILENAME>
      <LINE>61</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEM::detail::Graph::m_baseCount' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEM::detail::Graph::{ctor}</FUNCTION>
    <DECORATED>??0Graph@detail@BWEM@@QAE@PAVMapImpl@12@@Z</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>area.cpp</FILENAME>
      <LINE>56</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEM::Area::m_id' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEM::Area::{ctor}</FUNCTION>
    <DECORATED>??0Area@BWEM@@QAE@ABV01@@Z</DECORATED>
    <FUNCLINE>56</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>area.cpp</FILENAME>
      <LINE>168</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>BWEM::Area::ComputeDistances</FUNCTION>
    <DECORATED>?ComputeDistances@Area@BWEM@@ABE?AV?$vector@HV?$allocator@H@std@@@std@@V?$Point@H$0CA@@BWAPI@@ABV?$vector@V?$Point@H$0CA@@BWAPI@@V?$allocator@V?$Point@H$0CA@@BWAPI@@@std@@@4@@Z</DECORATED>
    <FUNCLINE>144</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>cp.cpp</FILENAME>
      <LINE>68</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEM::ChokePoint::m_blocked' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEM::ChokePoint::{ctor}</FUNCTION>
    <DECORATED>??0ChokePoint@BWEM@@QAE@ABV01@@Z</DECORATED>
    <FUNCLINE>68</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>graph.cpp</FILENAME>
      <LINE>445</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>Dereferencing NULL pointer 'cp'. </DESCRIPTION>
    <FUNCTION>BWEM::detail::Graph::GetPath</FUNCTION>
    <DECORATED>?GetPath@Graph@detail@BWEM@@QBEABV?$vector@PBVChokePoint@BWEM@@V?$allocator@PBVChokePoint@BWEM@@@std@@@std@@ABV?$Point@H$00@BWAPI@@0PAH@Z</DECORATED>
    <FUNCLINE>392</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>394</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>395</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>397</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>403</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>409</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>411</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>declaration</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'pBestCpA' is NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>412</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>414</LINE>
        <COLUMN>55</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>432</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>434</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>Enter this branch, (assume 'pLength')</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>438</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>440</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>Enter this branch, (assume 'Path.size()==1')</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>443</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>alias</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>(alias) 'cp' receives the value of 'pBestCpA' (which may be NULL)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
        <FILENAME>graph.cpp</FILENAME>
        <LINE>445</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>usage</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'cp' is dereferenced, but may still be NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>mapimpl.cpp</FILENAME>
      <LINE>57</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEM::detail::MapImpl::m_maxAltitude' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEM::detail::MapImpl::{ctor}</FUNCTION>
    <DECORATED>??0MapImpl@detail@BWEM@@QAE@XZ</DECORATED>
    <FUNCLINE>57</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>map.h</FILENAME>
      <LINE>220</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEM::Map::m_walkSize' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEM::Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@BWEM@@IAE@XZ</DECORATED>
    <FUNCLINE>220</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>mapimpl.cpp</FILENAME>
      <LINE>464</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEM::detail::TempAreaInfo::m_size' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEM::detail::TempAreaInfo::{ctor}</FUNCTION>
    <DECORATED>??0TempAreaInfo@detail@BWEM@@QAE@XZ</DECORATED>
    <FUNCLINE>464</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>tiles.h</FILENAME>
      <LINE>197</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEM::Tile::m_minAltitude' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEM::Tile::{ctor}</FUNCTION>
    <DECORATED>??0Tile@BWEM@@QAE@XZ</DECORATED>
    <FUNCLINE>197</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\bwem</FILEPATH>
      <FILENAME>winutils.cpp</FILENAME>
      <LINE>31</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'BWEM::utils::Timer::m_start' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>BWEM::utils::Timer::{ctor}</FUNCTION>
    <DECORATED>??0Timer@utils@BWEM@@QAE@XZ</DECORATED>
    <FUNCLINE>31</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\main</FILEPATH>
      <FILENAME>mcrave.h</FILENAME>
      <LINE>33</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'McRave::Time::frames' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>McRave::Time::{ctor}</FUNCTION>
    <DECORATED>??0Time@McRave@@QAE@XZ</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\combat</FILEPATH>
      <FILENAME>combat.h</FILENAME>
      <LINE>32</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'McRave::Combat::Cluster::radius' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>McRave::Combat::Cluster::{ctor}</FUNCTION>
    <DECORATED>??0Cluster@Combat@McRave@@QAE@V?$Point@H$00@BWAPI@@0VUnitType@4@@Z</DECORATED>
    <FUNCLINE>32</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\combat</FILEPATH>
      <FILENAME>combat.h</FILENAME>
      <LINE>37</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'McRave::Combat::Cluster::radius' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>McRave::Combat::Cluster::{ctor}</FUNCTION>
    <DECORATED>??0Cluster@Combat@McRave@@QAE@XZ</DECORATED>
    <FUNCLINE>37</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\resource</FILEPATH>
      <FILENAME>resourceinfo.h</FILENAME>
      <LINE>23</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'McRave::ResourceInfo::threatened' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>McRave::ResourceInfo::{ctor}</FUNCTION>
    <DECORATED>??0ResourceInfo@McRave@@QAE@PAVUnitInterface@BWAPI@@@Z</DECORATED>
    <FUNCLINE>23</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\horizon</FILEPATH>
      <FILENAME>horizon.cpp</FILENAME>
      <LINE>28</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Horizon::`anonymous-namespace'::perpDist</FUNCTION>
    <DECORATED>?perpDist@?A0x6cf7e83e@Horizon@McRave@@YANV?$Point@H$00@BWAPI@@00@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\horizon</FILEPATH>
      <FILENAME>horizon.cpp</FILENAME>
      <LINE>28</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Horizon::`anonymous-namespace'::perpDist</FUNCTION>
    <DECORATED>?perpDist@?A0x6cf7e83e@Horizon@McRave@@YANV?$Point@H$00@BWAPI@@00@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\horizon</FILEPATH>
      <FILENAME>horizon.cpp</FILENAME>
      <LINE>28</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Horizon::`anonymous-namespace'::perpDist</FUNCTION>
    <DECORATED>?perpDist@?A0x6cf7e83e@Horizon@McRave@@YANV?$Point@H$00@BWAPI@@00@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\all</FILEPATH>
      <FILENAME>buildorder.cpp</FILENAME>
      <LINE>101</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::BuildOrder::atPercent</FUNCTION>
    <DECORATED>?atPercent@BuildOrder@McRave@@YA_NVUnitType@BWAPI@@N@Z</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\all</FILEPATH>
      <FILENAME>learning.cpp</FILENAME>
      <LINE>314</LINE>
      <COLUMN>99</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Learning::`anonymous-namespace'::getBestBuild::&lt;lambda_c76a674d000b8da043d538e6f8c84498&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_c76a674d000b8da043d538e6f8c84498&gt;@@QBENHH@Z</DECORATED>
    <FUNCLINE>315</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\all</FILEPATH>
      <FILENAME>learning.cpp</FILENAME>
      <LINE>314</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Learning::`anonymous-namespace'::getBestBuild::&lt;lambda_c76a674d000b8da043d538e6f8c84498&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_c76a674d000b8da043d538e6f8c84498&gt;@@QBENHH@Z</DECORATED>
    <FUNCLINE>315</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\terran\tvffa</FILEPATH>
      <FILENAME>tva.cpp</FILENAME>
      <LINE>35</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6286</DEFECTCODE>
    <DESCRIPTION>(&lt;non-zero constant&gt; || &lt;expression&gt;) is always a non-zero constant.  &lt;expression&gt; is never evaluated and might have side effects.</DESCRIPTION>
    <FUNCTION>McRave::BuildOrder::Terran::TvA</FUNCTION>
    <DECORATED>?TvA@Terran@BuildOrder@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>12</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\zerg</FILEPATH>
      <FILENAME>zergbuildorder.cpp</FILENAME>
      <LINE>220</LINE>
      <COLUMN>68</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::BuildOrder::Zerg::`anonymous-namespace'::calculateGasLimit</FUNCTION>
    <DECORATED>?calculateGasLimit@?A0x67124035@Zerg@BuildOrder@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>211</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\zerg</FILEPATH>
      <FILENAME>zergbuildorder.cpp</FILENAME>
      <LINE>226</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::BuildOrder::Zerg::`anonymous-namespace'::calculateGasLimit</FUNCTION>
    <DECORATED>?calculateGasLimit@?A0x67124035@Zerg@BuildOrder@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>211</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\zerg</FILEPATH>
      <FILENAME>zergbuildorder.cpp</FILENAME>
      <LINE>280</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::BuildOrder::Zerg::capGas</FUNCTION>
    <DECORATED>?capGas@Zerg@BuildOrder@McRave@@YAHH@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\zerg</FILEPATH>
      <FILENAME>zergbuildorder.cpp</FILENAME>
      <LINE>280</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::BuildOrder::Zerg::capGas</FUNCTION>
    <DECORATED>?capGas@Zerg@BuildOrder@McRave@@YAHH@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\zerg\zvffa</FILEPATH>
      <FILENAME>zvffa.cpp</FILENAME>
      <LINE>51</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::BuildOrder::Zerg::lingsNeeded_ZvFFA</FUNCTION>
    <DECORATED>?lingsNeeded_ZvFFA@Zerg@BuildOrder@McRave@@YAHXZ</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\zerg\zvffa</FILEPATH>
      <FILENAME>zvffa.cpp</FILENAME>
      <LINE>51</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::BuildOrder::Zerg::lingsNeeded_ZvFFA</FUNCTION>
    <DECORATED>?lingsNeeded_ZvFFA@Zerg@BuildOrder@McRave@@YAHXZ</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\builds\zerg\zvffa</FILEPATH>
      <FILENAME>zvffa.cpp</FILENAME>
      <LINE>51</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::BuildOrder::Zerg::lingsNeeded_ZvFFA</FUNCTION>
    <DECORATED>?lingsNeeded_ZvFFA@Zerg@BuildOrder@McRave@@YAHXZ</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>pathing.cpp</FILENAME>
      <LINE>136</LINE>
      <COLUMN>207</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Pathing::`anonymous-namespace'::updateSurroundPositions</FUNCTION>
    <DECORATED>?updateSurroundPositions@?A0x9b490f8e@Pathing@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>pathing.cpp</FILENAME>
      <LINE>137</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Pathing::`anonymous-namespace'::updateSurroundPositions</FUNCTION>
    <DECORATED>?updateSurroundPositions@?A0x9b490f8e@Pathing@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>pathing.cpp</FILENAME>
      <LINE>138</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Pathing::`anonymous-namespace'::updateSurroundPositions</FUNCTION>
    <DECORATED>?updateSurroundPositions@?A0x9b490f8e@Pathing@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>targeting.cpp</FILENAME>
      <LINE>291</LINE>
      <COLUMN>85</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Targets::`anonymous-namespace'::scoreTarget::&lt;lambda_3bd538d9ca87f0130ed02f94f4af22dc&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_3bd538d9ca87f0130ed02f94f4af22dc&gt;@@QBENXZ</DECORATED>
    <FUNCLINE>295</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>targeting.cpp</FILENAME>
      <LINE>384</LINE>
      <COLUMN>86</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Targets::`anonymous-namespace'::getSimTarget</FUNCTION>
    <DECORATED>?getSimTarget@?A0x07557861@Targets@McRave@@YAXAAVUnitInfo@3@W4PlayerState@3@@Z</DECORATED>
    <FUNCLINE>366</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitinfo.cpp</FILENAME>
      <LINE>99</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::UnitInfo::updateStatistics</FUNCTION>
    <DECORATED>?updateStatistics@UnitInfo@McRave@@AAEXXZ</DECORATED>
    <FUNCLINE>78</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitinfo.cpp</FILENAME>
      <LINE>99</LINE>
      <COLUMN>133</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::UnitInfo::updateStatistics</FUNCTION>
    <DECORATED>?updateStatistics@UnitInfo@McRave@@AAEXXZ</DECORATED>
    <FUNCLINE>78</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitinfo.cpp</FILENAME>
      <LINE>597</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::UnitInfo::canStartCast</FUNCTION>
    <DECORATED>?canStartCast@UnitInfo@McRave@@QAE_NVTechType@BWAPI@@V?$Point@H$00@4@@Z</DECORATED>
    <FUNCLINE>577</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitmath.cpp</FILENAME>
      <LINE>248</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Math::survivability::&lt;lambda_7ded883f8303e44897919665a60a81df&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_7ded883f8303e44897919665a60a81df&gt;@@QBENXZ</DECORATED>
    <FUNCLINE>249</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitmath.cpp</FILENAME>
      <LINE>248</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Math::survivability::&lt;lambda_7ded883f8303e44897919665a60a81df&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_7ded883f8303e44897919665a60a81df&gt;@@QBENXZ</DECORATED>
    <FUNCLINE>249</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitmath.cpp</FILENAME>
      <LINE>253</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Math::survivability</FUNCTION>
    <DECORATED>?survivability@Math@McRave@@YANAAVUnitInfo@2@@Z</DECORATED>
    <FUNCLINE>243</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitmath.cpp</FILENAME>
      <LINE>336</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Math::groundDamage</FUNCTION>
    <DECORATED>?groundDamage@Math@McRave@@YANAAVUnitInfo@2@@Z</DECORATED>
    <FUNCLINE>317</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitmath.cpp</FILENAME>
      <LINE>354</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Math::airDamage</FUNCTION>
    <DECORATED>?airDamage@Math@McRave@@YANAAVUnitInfo@2@@Z</DECORATED>
    <FUNCLINE>339</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitmath.cpp</FILENAME>
      <LINE>403</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Math::simRadius</FUNCTION>
    <DECORATED>?simRadius@Math@McRave@@YANAAVUnitInfo@2@@Z</DECORATED>
    <FUNCLINE>374</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitmath.cpp</FILENAME>
      <LINE>419</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Math::simRadius</FUNCTION>
    <DECORATED>?simRadius@Math@McRave@@YANAAVUnitInfo@2@@Z</DECORATED>
    <FUNCLINE>374</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\info\unit</FILEPATH>
      <FILENAME>unitmath.cpp</FILENAME>
      <LINE>420</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Math::simRadius</FUNCTION>
    <DECORATED>?simRadius@Math@McRave@@YANAAVUnitInfo@2@@Z</DECORATED>
    <FUNCLINE>374</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\expanding</FILEPATH>
      <FILENAME>expanding.cpp</FILENAME>
      <LINE>163</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Expansion::`anonymous-namespace'::updateExpandOrder</FUNCTION>
    <DECORATED>?updateExpandOrder@?A0x6164dbed@Expansion@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>80</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\expanding</FILEPATH>
      <FILENAME>expanding.cpp</FILENAME>
      <LINE>163</LINE>
      <COLUMN>108</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Expansion::`anonymous-namespace'::updateExpandOrder</FUNCTION>
    <DECORATED>?updateExpandOrder@?A0x6164dbed@Expansion@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>80</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\expanding</FILEPATH>
      <FILENAME>expanding.cpp</FILENAME>
      <LINE>164</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Expansion::`anonymous-namespace'::updateExpandOrder</FUNCTION>
    <DECORATED>?updateExpandOrder@?A0x6164dbed@Expansion@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>80</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\expanding</FILEPATH>
      <FILENAME>expanding.cpp</FILENAME>
      <LINE>164</LINE>
      <COLUMN>98</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Expansion::`anonymous-namespace'::updateExpandOrder</FUNCTION>
    <DECORATED>?updateExpandOrder@?A0x6164dbed@Expansion@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>80</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\planning</FILEPATH>
      <FILENAME>planning.cpp</FILENAME>
      <LINE>293</LINE>
      <COLUMN>129</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Planning::`anonymous-namespace'::closestLocation</FUNCTION>
    <DECORATED>?closestLocation@?A0xb7aff365@Planning@McRave@@YA?AV?$Point@H$0CA@@BWAPI@@VUnitType@5@V?$Point@H$00@5@@Z</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\planning</FILEPATH>
      <FILENAME>planning.cpp</FILENAME>
      <LINE>293</LINE>
      <COLUMN>98</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Planning::`anonymous-namespace'::closestLocation</FUNCTION>
    <DECORATED>?closestLocation@?A0xb7aff365@Planning@McRave@@YA?AV?$Point@H$0CA@@BWAPI@@VUnitType@5@V?$Point@H$00@5@@Z</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\producing</FILEPATH>
      <FILENAME>producing.cpp</FILENAME>
      <LINE>478</LINE>
      <COLUMN>164</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Producing::scoreUnit</FUNCTION>
    <DECORATED>?scoreUnit@Producing@McRave@@YANVUnitType@BWAPI@@@Z</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\producing</FILEPATH>
      <FILENAME>producing.cpp</FILENAME>
      <LINE>478</LINE>
      <COLUMN>146</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Producing::scoreUnit</FUNCTION>
    <DECORATED>?scoreUnit@Producing@McRave@@YANVUnitType@BWAPI@@@Z</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\producing</FILEPATH>
      <FILENAME>producing.cpp</FILENAME>
      <LINE>478</LINE>
      <COLUMN>141</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Producing::scoreUnit</FUNCTION>
    <DECORATED>?scoreUnit@Producing@McRave@@YANVUnitType@BWAPI@@@Z</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\producing</FILEPATH>
      <FILENAME>producing.cpp</FILENAME>
      <LINE>479</LINE>
      <COLUMN>142</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Producing::scoreUnit</FUNCTION>
    <DECORATED>?scoreUnit@Producing@McRave@@YANVUnitType@BWAPI@@@Z</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\producing</FILEPATH>
      <FILENAME>producing.cpp</FILENAME>
      <LINE>479</LINE>
      <COLUMN>128</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Producing::scoreUnit</FUNCTION>
    <DECORATED>?scoreUnit@Producing@McRave@@YANVUnitType@BWAPI@@@Z</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\producing</FILEPATH>
      <FILENAME>producing.cpp</FILENAME>
      <LINE>479</LINE>
      <COLUMN>123</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Producing::scoreUnit</FUNCTION>
    <DECORATED>?scoreUnit@Producing@McRave@@YANVUnitType@BWAPI@@@Z</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\macro\researching</FILEPATH>
      <FILENAME>researching.cpp</FILENAME>
      <LINE>189</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>6287</DEFECTCODE>
    <DESCRIPTION>Redundant code:  the left and right sub-expressions are identical.</DESCRIPTION>
    <FUNCTION>McRave::Researching::haveOrResearching</FUNCTION>
    <DECORATED>?haveOrResearching@Researching@McRave@@YA_NVTechType@BWAPI@@@Z</DECORATED>
    <FUNCLINE>188</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\main</FILEPATH>
      <FILENAME>util.cpp</FILENAME>
      <LINE>252</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Util::clipLine</FUNCTION>
    <DECORATED>?clipLine@Util@McRave@@YA?AV?$Point@H$00@BWAPI@@V34@0@Z</DECORATED>
    <FUNCLINE>241</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\main</FILEPATH>
      <FILENAME>util.cpp</FILENAME>
      <LINE>262</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Util::clipLine</FUNCTION>
    <DECORATED>?clipLine@Util@McRave@@YA?AV?$Point@H$00@BWAPI@@V34@0@Z</DECORATED>
    <FUNCLINE>241</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\main</FILEPATH>
      <FILENAME>util.cpp</FILENAME>
      <LINE>286</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Util::projectLine</FUNCTION>
    <DECORATED>?projectLine@Util@McRave@@YA?AV?$Point@H$00@BWAPI@@U?$pair@V?$Point@H$00@BWAPI@@V12@@std@@V34@@Z</DECORATED>
    <FUNCLINE>282</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\main</FILEPATH>
      <FILENAME>util.cpp</FILENAME>
      <LINE>286</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Util::projectLine</FUNCTION>
    <DECORATED>?projectLine@Util@McRave@@YA?AV?$Point@H$00@BWAPI@@U?$pair@V?$Point@H$00@BWAPI@@V12@@std@@V34@@Z</DECORATED>
    <FUNCLINE>282</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\main</FILEPATH>
      <FILENAME>util.cpp</FILENAME>
      <LINE>342</LINE>
      <COLUMN>70</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Util::getClosestPointToRadiusGround</FUNCTION>
    <DECORATED>?getClosestPointToRadiusGround@Util@McRave@@YA?AU?$pair@NV?$Point@H$00@BWAPI@@@std@@V?$Point@H$00@BWAPI@@0N@Z</DECORATED>
    <FUNCLINE>315</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\map</FILEPATH>
      <FILENAME>terrain.cpp</FILENAME>
      <LINE>404</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Terrain::`anonymous-namespace'::findHarassPosition</FUNCTION>
    <DECORATED>?findHarassPosition@?A0xb8d1af15@Terrain@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>303</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\all</FILEPATH>
      <FILENAME>commands.cpp</FILENAME>
      <LINE>33</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Command::`anonymous-namespace'::visible</FUNCTION>
    <DECORATED>?visible@?A0x94f112e4@Command@McRave@@YANAAVUnitInfo@3@V?$Point@H$07@BWAPI@@@Z</DECORATED>
    <FUNCLINE>32</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\all</FILEPATH>
      <FILENAME>commands.cpp</FILENAME>
      <LINE>90</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Command::`anonymous-namespace'::findViablePosition</FUNCTION>
    <DECORATED>?findViablePosition@?A0x94f112e4@Command@McRave@@YA?AV?$Point@H$00@BWAPI@@AAVUnitInfo@3@V45@HV?$function@$$A6ANV?$Point@H$07@BWAPI@@@Z@std@@@Z</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\all</FILEPATH>
      <FILENAME>specials.cpp</FILENAME>
      <LINE>337</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Command::morph</FUNCTION>
    <DECORATED>?morph@Command@McRave@@YA_NAAVUnitInfo@2@@Z</DECORATED>
    <FUNCLINE>307</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\combat</FILEPATH>
      <FILENAME>combat.h</FILENAME>
      <LINE>18</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'McRave::Combat::ClusterNode::unit' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>McRave::Combat::ClusterNode::{ctor}</FUNCTION>
    <DECORATED>??0ClusterNode@Combat@McRave@@QAE@XZ</DECORATED>
    <FUNCLINE>18</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\combat</FILEPATH>
      <FILENAME>formations.cpp</FILENAME>
      <LINE>164</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Combat::Formations::createConcave</FUNCTION>
    <DECORATED>?createConcave@Formations@Combat@McRave@@YAXAAUCluster@23@@Z</DECORATED>
    <FUNCLINE>135</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\combat</FILEPATH>
      <FILENAME>formations.cpp</FILENAME>
      <LINE>165</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Combat::Formations::createConcave</FUNCTION>
    <DECORATED>?createConcave@Formations@Combat@McRave@@YAXAAUCluster@23@@Z</DECORATED>
    <FUNCLINE>135</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\combat</FILEPATH>
      <FILENAME>combat.h</FILENAME>
      <LINE>44</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'McRave::Combat::Formation::cluster' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>McRave::Combat::Formation::{ctor}</FUNCTION>
    <DECORATED>??0Formation@Combat@McRave@@QAE@XZ</DECORATED>
    <FUNCLINE>44</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\combat</FILEPATH>
      <FILENAME>navigation.cpp</FILENAME>
      <LINE>101</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Combat::Navigation::getHarassPath::&lt;lambda_411e6f7844a8e78479353dab0ad934c2&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_411e6f7844a8e78479353dab0ad934c2&gt;@@QBENABV?$Point@H$0CA@@BWAPI@@@Z</DECORATED>
    <FUNCLINE>103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\worker</FILEPATH>
      <FILENAME>workers.cpp</FILENAME>
      <LINE>417</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Workers::shouldMoveToBuild</FUNCTION>
    <DECORATED>?shouldMoveToBuild@Workers@McRave@@YA_NAAVUnitInfo@2@V?$Point@H$0CA@@BWAPI@@VUnitType@5@@Z</DECORATED>
    <FUNCLINE>410</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\worker</FILEPATH>
      <FILENAME>workers.cpp</FILENAME>
      <LINE>418</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Workers::shouldMoveToBuild</FUNCTION>
    <DECORATED>?shouldMoveToBuild@Workers@McRave@@YA_NAAVUnitInfo@2@V?$Point@H$0CA@@BWAPI@@VUnitType@5@@Z</DECORATED>
    <FUNCLINE>410</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\worker</FILEPATH>
      <FILENAME>workers.cpp</FILENAME>
      <LINE>422</LINE>
      <COLUMN>86</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Workers::shouldMoveToBuild</FUNCTION>
    <DECORATED>?shouldMoveToBuild@Workers@McRave@@YA_NAAVUnitInfo@2@V?$Point@H$0CA@@BWAPI@@VUnitType@5@@Z</DECORATED>
    <FUNCLINE>410</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\micro\worker</FILEPATH>
      <FILENAME>workers.cpp</FILENAME>
      <LINE>423</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Workers::shouldMoveToBuild</FUNCTION>
    <DECORATED>?shouldMoveToBuild@Workers@McRave@@YA_NAAVUnitInfo@2@V?$Point@H$0CA@@BWAPI@@VUnitType@5@@Z</DECORATED>
    <FUNCLINE>410</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>e:\bwapi\module\mcrave\source\mcrave\strategy\goals</FILEPATH>
      <FILENAME>goals.cpp</FILENAME>
      <LINE>126</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>McRave::Goals::`anonymous-namespace'::updateGenericGoals</FUNCTION>
    <DECORATED>?updateGenericGoals@?A0x306f2435@Goals@McRave@@YAXXZ</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>